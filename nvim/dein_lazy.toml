[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#enable_camel_case = 0
  let g:deoplete#enable_ignore_case = 0
  let g:deoplete#enable_refresh_always = 0
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_list = 10000
  inoremap <expr><tab> pumvisible() ? "\<C-n>" : "\<tab>"
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap <silent> <C-p> :Denite file/old<CR>
  nnoremap <silent> .. :Denite file/rec<CR>
  nnoremap <silent> db :Denite buffer<CR>
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> <ESC> denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> t denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> s denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v denite#do_map('do_action', 'vsplit')
  endfunction
'''
hook_source = '''
  if executable('rg')
    call denite#custom#var('file/rec', 'command',
          \ ['rg', '--files', '--glob', '!.git'])
    call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'default_opts',
          \ ['-i', '--vimgrep', '--no-heading'])
  endif

  call denite#custom#source('file/old', 'converters',
      \ ['converter/abbr_word', 'converter/relative_abbr', 'converter/relative_word'])
  call denite#custom#source('tag', 'matchers', ['matcher/substring'])
  call denite#custom#source('file/rec', 'matchers',
      \ ['matcher/fruzzy', 'converter/abbr_word'])

  call denite#custom#alias('source', 'file/rec/git', 'file/rec')
  call denite#custom#var('file/rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7
  call denite#custom#option('default', {
      \ 'highlight_filter_background': 'CursorLine',
      \ 'source_names': 'short',
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ })
'''

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = 'let g:fruzzy#sortonempty = 0'
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['vim-choosewin']
hook_add = '''
  nnoremap <silent> <Space>f :Defx -new -toggle -split=vertical -winwidth=40 -direction=topleft<CR>
  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('open')
    nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> t defx#do_action('open', 'tabedit')
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr><nowait> <CR> defx#do_action('call', 'DefxChoosewin')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction
  let g:defx_ignore_filtype = ['denite', 'defx', 'tagbar']
  function! DefxChoosewin(context) abort
    let l:winnrs = filter(range(1, winnr('$')), 'index(g:defx_ignore_filtype, getwinvar(v:val, "&filetype")) == -1' )
    for filename in a:context.targets
      call choosewin#start(l:winnrs, {'auto_choose': 1, 'hook_enable': 0})
      execute 'edit' filename
    endfor
  endfunction
'''

[[plugins]]
repo = 'chrisbra/vim-zsh'
on_ft = 'zsh'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'dense-analysis/ale'
on_ft = ['python', 'sh', 'terraform', 'json', 'yaml', 'dockerfile', 'make', 'javascript', 'typescript', 'typescriptreact', 'bash', 'zsh']
hook_add = '''
  let g:ale_linters = {
\   'python': ['flake8'],
\   'sh': ['shellcheck'],
\   'bash': ['shellcheck'],
\   'zsh': ['shellcheck'],
\   'yaml': ['yamllint'],
\   'dockerfile': ['hadolint'],
\   'make': ['checkmake'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\   'typescriptreact': ['eslint'],
\ }
  let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['black'],
\   'sh': ['shfmt'],
\   'bash': ['shfmt'],
\   'zsh': ['shfmt'],
\   'terraform': ['terraform'],
\   'json': ['jq'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\   'typescriptreact': ['eslint'],
\ }
  let g:ale_linters_explicit = 1
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'
  highlight clear ALEErrorSign
  highlight clear ALEWarningSign
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
  nmap <silent> <C-j> <Plug>(ale_next_wrap)
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  let g:ale_sign_column_always = 1
  let g:ale_fix_on_save = 1
'''

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = 'terraform'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
  let g:vim_json_syntax_conceal = 1
'''

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'previm/previm'
on_ft = 'markdown'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = 'markdown'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'typescript', 'typescriptreact']

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['typescript', 'typescriptreact']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'typescript', 'typescriptreact']
depends = ['vim-javascript', 'yats.vim']
hook_add = '''
  let g:vim_jsx_pretty_colorful_config = 1
  let g:vim_jsx_pretty_enable_jsx_highlight = 1
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
  let g:go_highlight_array_whitespace_error = 1
  let g:go_highlight_chan_whitespace_error = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_space_tab_error = 1
  let g:go_highlight_trailing_whitespace_error = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_function_parameters = 1
  let g:go_highlight_function_calls = 1
  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_generate_tags = 1
  let g:go_highlight_variable_declarations = 1
  let g:go_highlight_variable_assignments = 1
  let g:go_fmt_command = "goimports"
  let g:go_auto_type_info = 1
  let g:go_addtags_transform = "camelcase"
  let g:go_def_mapping_enabled = 0
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends= ['async.vim', 'deoplete-vim-lsp']
on_ft = ['go', 'typescript', 'dockerfile', 'sh', 'typescriptreact', 'sql', 'python', 'bash']
hook_add = '''
  if executable('gopls')
    augroup LspGo
      au!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ 'workspace_config': {'gopls': {'staticcheck': v:true}},
        \ })
    augroup END
  endif
  if executable('typescript-language-server')
    augroup LspTypeScript
      au!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript', 'typescript.tsx', 'typescriptreact'],
        \ })
    augroup END
  endif
  if executable('docker-langserver')
    augroup LspDocker
      au!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'docker-langserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
        \ 'whitelist': ['dockerfile'],
        \ })
    augroup END
  endif
  if executable('bash-language-server')
    augroup LspBash
      au!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'bash-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
        \ 'whitelist': ['sh', 'bash', 'zsh'],
        \ })
    augroup END
  endif
  if executable('sql-language-server')
    augroup LspSQL
      au!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'sql-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'sql-language-server up --method stdio']},
        \ 'whitelist': ['sql'],
        \ })
    augroup END
  endif
  if executable('pyls')
    augroup LspPython
      au!
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'pyls']},
        \ 'whitelist': ['python'],
        \ })
    augroup END
  endif
  let g:lsp_async_completion = 1
  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_text_edit_enabled = 1
  nnoremap gd :LspDefinition<CR>
  nnoremap H :LspHover<CR>
  nnoremap <F2> :LspRename<CR>
  set completeopt-=preview
'''

[[plugins]]
repo = 'ryanolsonx/vim-lsp-typescript'
on_ft = ['typescript']
depends = ['vim-lsp']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'javascript.jsx', 'typescript.tsx']
hook_add = '''
  let g:user_emmet_settings = {
  \  'javascript': {
  \      'extends': 'jsx',
  \  },
  \  'typescript': {
  \      'extends': 'jsx',
  \  },
  \}
'''

[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = ['nginx']

[[plugins]]
repo = 't9md/vim-choosewin'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
on_ft = ['go']
